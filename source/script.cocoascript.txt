var onRun = function(context) {
	var sketch     = context.document;
	var selection  = context.selection;
	var layerCount = selection.count();

	// Plugin requires a selection to determine the starting colour
	if (layerCount == 0) {
		sketch.displayMessage('No layer selected');
	} else {
		// Options window
		var selectedLayer     = getSelectedLayer(selection.firstObject());
		var selectedLayerType = selectedLayer.class();
		var originalFill      = selectedLayer.style().fills().firstObject();
		var originalBorder    = selectedLayer.style().borders().firstObject();
		var originalShadow    = selectedLayer.style().shadows().firstObject();
		var alert             = buildDialog(selectedLayer, selectedLayerType, originalFill, originalBorder, originalShadow);
    	var options           = handleAlertResponse(alert, alert.runModal(), selectedLayerType, originalFill, originalBorder, originalShadow);

		// Colours
		var colour            = getColour(selectedLayer, options.layerProperty);
		var originalColour    = "#" + colour.hexValue();
		var replacementColour = options.colour;

		if (replacementColour != undefined) {
			var i, j, layer;

			// All pages
			for (i = 0; i < sketch.pages().count(); i++) {
				var page = sketch.pages().objectAtIndex(i);

				// All artboards
				for (j = 0; j < page.artboards().count(); j++) {
					var artboard = page.artboards().objectAtIndex(j);

					// All layers inside artboard
					for (var k = 0; k < artboard.layers().count(); k++) {
						layer = artboard.layers().objectAtIndex(k);

						checkLayer(layer, options, originalColour);
					}
				}

				// All layers inside page
				for (j = 0; j < page.layers().count(); j++) {
					layer = page.layers().objectAtIndex(j);

					checkLayer(layer, options, originalColour);
				}
			}
		}
	}

	/**
	 * Build dialog window with appropriate options
	 * @param   {NSLayer}         selectedLayer      The layer selected at run time
	 * @param   {NSLayer}         selectedLayerType  The layer type of the layer selected at run time
	 * @param   {MSStyleFill}     originalFill       The layer's original fill
	 * @param   {MSStyleBorder}   originalBorder     The layer's original border
	 * @param   {MSStyleShadow}   originalShadow     The layer's original shadow
	 * @return  {COSAlertWindow}                     The alert window requesting input
	 */
    function buildDialog(selectedLayer, selectedLayerType, originalFill, originalBorder, originalShadow) {
    	var alert = COSAlertWindow.new();

		alert.setMessageText('Find & Replace Colour');

		var colourChoices = getColourChoices(originalFill, originalBorder, originalShadow);

		if (colourChoices.length) {
			if (colourChoices.length == 1) {
				// Only one possibility
				colour = getColour(selectedLayer, colourChoices[0]);
				alert.setInformativeText('You will be replacing the ' + colourChoices[0] + ' colour (#' + colour.hexValue() + ') of this layer.');
			} else {
				// Allow user to choose
				alert.setInformativeText('Select the property containing the colour to replace, enter a replacement colour, and choose which properties to update.');

				var choosePropertySelect = createSelect(colourChoices, 0);

				alert.addAccessoryView(choosePropertySelect);
			}
		}

		alert.addTextLabelWithValue('New colour (Hex or Hue if Hue selected)');
		alert.addTextFieldWithValue('#');

		alert.addTextLabelWithValue('What should we update on other layers?');

		var propertyOptions = ['All', 'Fill', 'Border', 'Text', 'Shadow'];
		var propertySelect  = createSelect(propertyOptions, 0);
		alert.addAccessoryView(propertySelect);

		alert.addTextLabelWithValue('Would you like to replace the Colour, or the Hue?');

		var colourOptions = ['Colour', 'Hue'];
		var colourSelect  = createSelect(colourOptions, 0);
		alert.addAccessoryView(colourSelect);

		alert.addButtonWithTitle('OK');
		alert.addButtonWithTitle('Cancel');

		return alert;
    }

	/**
	 * Retrieve an array of colour choices given the selected layer's state
	 * @param   {MSStyleFill}    originalFill    The layer's original fill
	 * @param   {MSStyleBorder}  originalBorder  The layer's original border
	 * @param   {MSStyleShadow}  originalShadow  The layer's original shadow
	 * @return  {array}                          The possible colour choices
	 */
	function getColourChoices(originalFill, originalBorder, originalShadow) {
		var colourChoices = [];

		if (selectedLayerType == 'MSShapeGroup') {
			// Shape layer
			if (originalFill != undefined) {
				colourChoices.push('Fill');
			}

			if (originalBorder != undefined) {
				colourChoices.push('Border');
			}
		} else {
			// Text layers always have a colour
			colourChoices.push('Text');
		}

		// Shadow applies to both types of layer
		if (originalShadow != undefined) {
			colourChoices.push('Shadow');
		}

		return colourChoices;
	}

	/**
	 * Create Select Box for dialog windows
	 * @param  {Array}      options           Options for the select
	 * @param  {Int}        selectedItemIndex Default selected item
	 * @return {NSComboBox}                   Complete select box
	 */
	function createSelect(options, selectedItemIndex) {
		selectedItemIndex = selectedItemIndex || 0;

		var select = NSComboBox.alloc().initWithFrame(NSMakeRect(0,0,200,25));
		select.i18nObjectValues = options;
		select.setEditable(false);
		select.addItemsWithObjectValues(options);
		select.selectItemAtIndex(selectedItemIndex);

		return select;
	}

	/**
	 * Get the requested style (fill, border, text) colour of the given layer
	 * @param  {MSLayer} layer         The layer whose colour to get
	 * @param  {Object}  layerProperty The style colour to fetch
	 * @return {MSColor}               The selected layer colour
	 */
	function getColour(layer, layerProperty) {
		var colour;
		var fill;
		var border;
		var shadow;

		if (layerProperty == 'Text') {
			colour = layer.textColor();

			// If the text layer also has a fill, use this as the primary colour
			fill = layer.style().fills().firstObject();

			if (fill != undefined && fill.isEnabled()) {
				colour = fill.color();
			}
		} else if (layerProperty == 'Fill') {
			fill = layer.style().fills().firstObject();

			if (fill != undefined && fill.isEnabled()) {
				colour = fill.color();
			}
		} else if (layerProperty == 'Border') {
			border = layer.style().borders().firstObject();

			if (border != undefined && border.isEnabled()) {
				colour = border.color();
			}
		} else if (layerProperty == 'Shadow') {
			shadow = layer.style().shadows().firstObject();

			if (shadow != undefined && shadow.isEnabled()) {
				colour = shadow.color();
			}
		}

		if (colour != undefined) {
			colour = colour.immutableModelObject();
		}

		return colour;
	}

	/**
	 * If the selected layer is a group, get its first child, and return a single layer
	 * @param  {NSLayer} selectedLayer The layer selected at run time
	 * @return {NSLayer}               The layer selected, or the first child if a group
	 */
	function getSelectedLayer(selectedLayer) {
		var selectedLayerType = selectedLayer.class();

		if (selectedLayerType == MSLayerGroup) {
			return getSelectedLayer(selectedLayer.layers().firstObject());
		} else {
			return selectedLayer;
		}
	}

	/**
	 * Collect user input from alert window
	 * @param   {COSAlertWindow}  alert              The alert window
	 * @param   {Int}             responseCode       Alert window response code
	 * @param   {String}          selectedLayerType  Class of the originally selected layer
	 * @param   {MSStyleFill}     originalFill       The layer's original fill
	 * @param   {MSStyleBorder}   originalBorder     The layer's original border
	 * @param   {MSStyleShadow}   originalShadow     The layer's original shadow
	 * @return  {Object}                             Alert window results
	 */
	function handleAlertResponse(alert, responseCode, selectedLayerType, originalFill, originalBorder, originalShadow) {
		if (responseCode == "1000") {
			var colourChoices = getColourChoices(originalFill, originalBorder, originalShadow);

			if (colourChoices.length == 1) {
				// 0 = Label
				// 1 = Text Input
				// 2 = Label
				// 3 = Property Select
				// 4 = Label
				// 5 = Hue Select
				return {
					layerProperty       : colourChoices[0],
					colour              : alert.viewAtIndex(1).stringValue(),
					replacementProperty : alert.viewAtIndex(3).i18nObjectValues[alert.viewAtIndex(3).indexOfSelectedItem()],
					replaceHue          : alert.viewAtIndex(5).i18nObjectValues[alert.viewAtIndex(5).indexOfSelectedItem()],
				};
			} else {
				// 0 = Property Select
				// 1 = Label
				// 2 = Text Input
				// 3 = Label
				// 4 = Property Select
				// 5 = Label
				// 6 = Hue Select
				return {
					layerProperty       : alert.viewAtIndex(0).i18nObjectValues[alert.viewAtIndex(0).indexOfSelectedItem()],
					colour              : alert.viewAtIndex(2).stringValue(),
					replacementProperty : alert.viewAtIndex(4).i18nObjectValues[alert.viewAtIndex(4).indexOfSelectedItem()],
					replaceHue          : alert.viewAtIndex(6).i18nObjectValues[alert.viewAtIndex(6).indexOfSelectedItem()],
				};
			}
		}

		return null;
    }

	/**
	 * Check if a layer's colour matches the colour of the originally selected layer
	 * @param  {MSLayer} layer The layer whose colour we are comparing
	 * @return null
	 */
	function checkLayer(layer, options, originalColour) {
		var layerType           = layer.class();
		var replacementProperty = options.replacementProperty;
		var replaceHue          = options.replaceHue == 'Hue';

		if (layerType == MSLayerGroup) {
			// Apply to all layers in a group
			for (var i = 0; i < layer.layers().count(); i++) {
				checkLayer(layer.layers().objectAtIndex(i), options, originalColour);
			}
		} else {
			if (layerType == MSShapeGroup) {
				// Set fill
				if (replacementProperty == 'Fill' || replacementProperty == 'All') {
					setColour(layer, layerType, 'Fill', replacementColour, originalColour, replaceHue);
				}

				// Set border
				if (replacementProperty == 'Border' || replacementProperty == 'All') {
					setColour(layer, layerType, 'Border', replacementColour, originalColour, replaceHue);
				}
			} else if (layerType == MSTextLayer && (replacementProperty == 'Text' || replacementProperty == 'All')) {
				// Set text colour
				setColour(layer, layerType, 'Text', replacementColour, originalColour, replaceHue);
			}

			if (layerType != MSSliceLayer && (replacementProperty == 'Shadow' || replacementProperty == 'All')) {
				// Set shadow
				setColour(layer, layerType, 'Shadow', replacementColour, originalColour, replaceHue);
			}
		}
	}

	/**
     * Convert hex string into RGBA
     * @param  {string} hexColor Hex Colour (with or without #)
     * @return {object}          Converted RGB values.
     */
    function hexToRgb(hex) {
    	var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);

		if (result) {
			result = {
	        	r : parseInt(result[1], 16),
	        	g : parseInt(result[2], 16),
	        	b : parseInt(result[3], 16),
	        };
		} else {
			result = null;
		}

		return result;
    }

	/**
	 * Set the fill or text colour of a layer to the newly specified colour
	 * @param {MSLayer}     layer               The layer whose colour to set
	 * @param {MSLayerType} layerType           The type of layer
	 * @param {string}      replacementProperty The property to replace
	 * @param {string}      replacementColour   The new colour to use
	 * @param {string}      originalColour      The original colour to replace
	 * @param {string}      replaceHue          Whether to replace Hue, rather than colour
	 */
	function setColour(layer, layerType, replacementProperty, replacementColour, originalColour, replaceHue) {
		var layerColour      = getColour(layer, replacementProperty);
		var replacementIsHue = false;
		var hue;

		if (replacementColour.indexOf('#') == -1) {
			// Replacement is a hue value from 0 to 360
			replacementIsHue = true;
		} else {
			replacementColour = hexToRgb(replacementColour);
		}

		if (layerColour != undefined && replacementColour != null) {
			var hexColour = '#' + layerColour.hexValue();

			// Convert to MSColor
			if (replacementIsHue) {
				hue = replacementColour / 360;
			} else {
				var replacementRGB = MSColor.colorWithRed_green_blue_alpha(replacementColour.r / 255, replacementColour.g / 255, replacementColour.b / 255, 1.0);
				hue = replacementRGB.hue();
			}

			if ((replaceHue && matchingHue(hexColour, originalColour)) || hexColour == originalColour) {
				// Matching item to update
				if (layerType == MSShapeGroup) {
					// Shape
					if (replacementProperty == 'Fill') {
						var fill = layer.style().fills().firstObject();

						if (fill != undefined) {
							if (replaceHue) {
								log(getHueAdjustedColour(fill.color(), hue));
								fill.color = getHueAdjustedColour(fill.color(), hue);
							} else {
								fill.color = MSColor.colorWithRed_green_blue_alpha(replacementColour.r / 255, replacementColour.g / 255, replacementColour.b / 255, 1.0);
							}
						}
					}

					if (replacementProperty == 'Border') {
						var border = layer.style().borders().firstObject();

						if (border != undefined) {
							if (replaceHue) {
								border.color = getHueAdjustedColour(border.color(), hue);
							} else {
								border.color = MSColor.colorWithRed_green_blue_alpha(replacementColour.r / 255, replacementColour.g / 255, replacementColour.b / 255, 1.0);
							}
						}
					}
				} else {
					if (replaceHue) {
						layer.textColor = getHueAdjustedColour(layer.textColor(), hue);
					} else {
						layer.textColor = MSColor.colorWithRed_green_blue_alpha(replacementColour.r / 255, replacementColour.g / 255, replacementColour.b / 255, 1.0);
					}
				}

				// Text shadow
				if (replacementProperty == 'Shadow') {
					var shadow = layer.style().shadows().firstObject();

					if (shadow != undefined) {
						if (replaceHue) {
							shadow.color = getHueAdjustedColour(shadow.color(), hue);
						} else {
							shadow.color = MSColor.colorWithRed_green_blue_alpha(replacementColour.r / 255, replacementColour.g / 255, replacementColour.b / 255, 1.0);
						}
					}
				}
			}
		}
	}

	/**
	 * Determine if two colours share the same hue, within a given threshold
	 * @param   {string}   colourOne  Hex value for colour one
	 * @param   {string}   colourTwo  Hex value for colour two
	 * @return  {Boolean}             Whether the hue of the two colours matches
	 */
	function matchingHue(colourOne, colourTwo) {
		var colourOneRGB = hexToRgb(colourOne);
		var colourTwoRGB = hexToRgb(colourTwo);

		// Convert to MSColors
		colourOne  = MSColor.colorWithRed_green_blue_alpha(colourOneRGB.r / 255, colourOneRGB.g / 255, colourOneRGB.b / 255, 1.0);
		colourTwo  = MSColor.colorWithRed_green_blue_alpha(colourTwoRGB.r / 255, colourTwoRGB.g / 255, colourTwoRGB.b / 255, 1.0);

		var threshold  = 0.005;
		var difference = colourOne.hue() - colourTwo.hue();

		if (Math.abs(difference) < Math.abs(threshold)) {
			return true;
		}

		return false;
	}

	/**
	 * Convert a colour with a new hue
	 * @param   {MSColor}  layerColour  Current layer colour
	 * @param   {object}   hue          New Hue
	 * @return  {MSColor}               Hue adjusted colour
	 */
	function getHueAdjustedColour(layerColour, hue) {
		return MSColor.colorWithHue_saturation_brightness_alpha(hue, layerColour.saturation(), layerColour.brightness(), layerColour.alpha());
	}
};
